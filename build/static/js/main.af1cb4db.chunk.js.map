{"version":3,"sources":["components/DisplayPersons.js","components/Filter.js","components/AddPerson.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["DisplayPersons","props","persons","filter","x","name","toLowerCase","includes","map","person","key","id","number","onClick","deletePerson","Filter","value","onChange","filterResults","AddPerson","onSubmit","addPerson","newName","handleChange","newNumber","handleChange2","type","newObject","axios","post","then","response","data","delete","concat","put","App","changeNumber","updatedPerson","find","personService","setPersons","setNotif","setTimeout","setNewName","setNewNumber","catch","error","setErrNotif","n","useState","setFilter","notif","errNotif","useEffect","get","console","log","event","target","message","className","preventDefault","window","confirm","p","deletingName","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af1cb4db.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst DisplayPersons = (props) => {\r\n\treturn (\r\n\t  <div>\r\n        {props.persons.filter(x => x.name.toLowerCase().includes(props.filter.toLowerCase()))\r\n        .map(person => <p key={person.id}>{person.name} {person.number}\r\n        <button onClick={() => props.deletePerson(person.id)}>remove</button></p> )}\r\n\t  </div>\r\n\t)\r\n}\r\n\r\nexport default DisplayPersons","import React from 'react'\r\n\r\n\r\nconst Filter = (props) => {\r\n\treturn (\r\n\t  <div>\r\n    \tfilter shown with: <input \r\n        \tvalue={props.filter}\r\n        \tonChange={props.filterResults}\r\n    \t/>\r\n\t  </div>\r\n\t)\r\n}\r\nexport default Filter","import React from 'react'\r\n\r\nconst AddPerson = (props) => {\r\n  return(\r\n    <form onSubmit={props.addPerson}>\r\n        <div>\r\n          name: <input \r\n            value={props.newName}\r\n            onChange={props.handleChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          number: <input \r\n            value={props.newNumber}\r\n            onChange={props.handleChange2}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n  )\r\n}\r\nexport default AddPerson","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n  return axios.delete(baseUrl.concat(`/${id}`))\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default {create, remove, update}","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport DisplayPersons from './components/DisplayPersons'\nimport Filter from './components/Filter'\nimport AddPerson from './components/AddPerson'\nimport personService from './services/persons'\n\nconst App = () => {\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className=\"notif\">\n        {message}\n      </div>\n    )\n  }\n  const ErrorMessage = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    if (persons.map(x => x.name).includes(newName)) {\n      if (window.confirm(`${newName} is already in phonebook, replace the old number with the new one?`)){\n        const p = persons.find(x => x.name === newName).id\n        //console.log(p)\n        changeNumber(p)\n        return\n      }\n      else return\n    }\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    //console.log(personObject)\n    personService\n    .create(personObject)\n    .then(response => {\n        //console.log(response)\n        setPersons(persons.concat(response))\n        setNotif(\n          `${newName} was added to phonebook`\n        )\n        setTimeout(() => {\n          setNotif(null)\n        }, 5000)\n        setNewName('')\n        setNewNumber('')\n      })\n  }\n\n  const deletePerson = id => {\n    const deletingName = persons.find(x => x.id === id).name\n    if (window.confirm(`Delete ${deletingName}?`)) {\n      personService.remove(id)\n      setPersons(persons.filter(x => (x.id !== id)))\n      setNotif(\n          `${deletingName} was removed from phonebook`\n        )\n        setTimeout(() => {\n          setNotif(null)\n        }, 5000)\n    }\n  }\n\n  const changeNumber = id => {\n    const p = persons.find(x => x.id === id)\n    const updatedPerson = {...p, number: newNumber}\n    personService\n      .update(id, updatedPerson)\n        .then(response => {\n        setPersons(persons.map(x => x.id === id ? response : x))\n        setNotif(\n          `Number of${newName} was changed`\n        )\n        setTimeout(() => {\n          setNotif(null)\n        }, 5000)\n        setNewName('')\n        setNewNumber('')\n      })\n      .catch(error => {\n        setErrNotif(\n          `${newName} has already been removed from the server`\n        )\n        setTimeout(() => {\n          setErrNotif(null)\n        }, 5000)\n        setPersons(persons.filter(n => n.id !== id))\n        setNewName('')\n        setNewNumber('')\n      })\n  }\n\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ filter, setFilter] = useState('')\n  const [notif, setNotif] = useState(null)\n  const [errNotif, setErrNotif] = useState(null)\n\n  const hook = () => {\n  axios\n    .get('http://localhost:3001/api/persons')\n    .then(response => {\n      console.log('promise fulfilled')\n      setPersons(response.data)\n    })\n  }\n\n  useEffect(hook, [])\n\n  const handleChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n  const handleChange2 = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n  const filterResults = (event) => {\n    console.log(event.target.value)\n    setFilter(event.target.value)\n  }\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter filter={filter} filterResults={filterResults}/>\n      <h2>Add new person</h2>\n      <Notification message={notif}/>\n      <ErrorMessage message={errNotif}/>\n      <AddPerson addPerson={addPerson} newName={newName} newNumber={newNumber} handleChange={handleChange} handleChange2={handleChange2}/>\n      <h2>Numbers</h2>\n      <DisplayPersons persons={persons} filter={filter} deletePerson={deletePerson}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}